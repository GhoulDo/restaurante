================================================================================
                    DOCUMENTACIÓN API - SISTEMA RESTAURANTE
================================================================================

DESARROLLO: http://localhost:8081/api
PRODUCCIÓN: https://restaurante-api-ovsa.onrender.com/api

✅ PROBLEMA RESUELTO: URL INCORRECTA EN DOCUMENTACIÓN
🔧 URL CORRECTA: https://restaurante-api-ovsa.onrender.com

🔧 ENDPOINTS DE DEBUG:
GET / - Información completa del servicio + endpoints disponibles
GET /health - Estado de salud detallado con info de BD
GET /ping - Ping rápido para verificación
GET /test-cors - Test de configuración CORS
GET /debug - 🆕 Información completa de debugging

✅ SERVICIO CONFIRMADO ACTIVO:
- URL Base: https://restaurante-api-ovsa.onrender.com
- API Base: https://restaurante-api-ovsa.onrender.com/api
- Estado: ✅ RUNNING
- Ambiente: RENDER
- Base de datos: ✅ CONECTADA
- CORS: ✅ HABILITADO
- Keep-alive: ✅ ACTIVO

🚨 COMANDOS DE VERIFICACIÓN ACTUALIZADOS:

# Test básico de conectividad
curl -v https://restaurante-api-ovsa.onrender.com/ping

# Test de salud completo
curl https://restaurante-api-ovsa.onrender.com/health

# Test de debug (info completa)
curl https://restaurante-api-ovsa.onrender.com/debug

# Test de API empleados
curl https://restaurante-api-ovsa.onrender.com/api/empleados

# Test de CORS
curl -H "Origin: http://localhost:3000" \
     -H "Access-Control-Request-Method: GET" \
     -H "Access-Control-Request-Headers: X-Requested-With" \
     -X OPTIONS \
     https://restaurante-api-ovsa.onrender.com/api/empleados

🛠️ CORS CONFIGURADO CORRECTAMENTE:
- allowedOriginPatterns: * (permite todos los orígenes)
- allowCredentials: false (compatible con origen "*")
- Métodos permitidos: GET, POST, PUT, DELETE, OPTIONS, PATCH
- Headers permitidos: todos (*)

🤖 KEEP-ALIVE ACTIVO PARA RENDER:
⏰ HORARIOS OPTIMIZADOS:
   - Ping cada 5 minutos (24/7) - Solo en Render
   - Ping cada 2 minutos (8 AM - 10 PM) - Horas laborales
   - Ping cada 20 minutos - Warm-up service

================================================================================
                            CONFIGURACIÓN PARA FRONTEND - CORREGIDA
================================================================================

// ✅ CONFIGURACIÓN CORRECTA - URLs ACTUALIZADAS
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 
  (typeof window !== 'undefined' && window.location.hostname === 'localhost' 
    ? 'http://localhost:8081/api' 
    : 'https://restaurante-api-ovsa.onrender.com/api');

// ✅ CORRECTO - Para aplicaciones SPA
const API_BASE_URL = window.location.hostname === 'localhost' 
  ? 'http://localhost:8081/api'
  : 'https://restaurante-api-ovsa.onrender.com/api';

// ✅ CORRECTO - Configuración manual ACTUALIZADA
const API_BASE_URL = 'https://restaurante-api-ovsa.onrender.com/api'; // Para producción
// const API_BASE_URL = 'http://localhost:8081/api'; // Para desarrollo

const defaultHeaders = {
  'Content-Type': 'application/json',
  'Accept': 'application/json'
};

// Función helper mejorada con mejor manejo de errores
const apiRequest = async (endpoint, options = {}) => {
  try {
    console.log(`🌐 API Request: ${API_BASE_URL}${endpoint}`);
    
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      ...options,
      headers: { ...defaultHeaders, ...options.headers }
    });
    
    console.log(`📡 Response Status: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`❌ API Error: ${response.status} - ${errorText}`);
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    const result = response.status === 204 ? null : await response.json();
    console.log(`✅ API Success:`, result);
    return result;
  } catch (error) {
    console.error('💥 API request failed:', error);
    throw error;
  }
};

// Test de conectividad ACTUALIZADO
const testConnection = async () => {
  try {
    const response = await fetch('https://restaurante-api-ovsa.onrender.com/health');
    const data = await response.json();
    console.log('🟢 Backend conectado:', data);
    return true;
  } catch (error) {
    console.error('🔴 Backend no disponible:', error);
    return false;
  }
};

// ✅ CONFIGURACIÓN ROBUSTA PARA FRONTEND - ACTUALIZADA
const API_BASE_URL_PRODUCTION = 'https://restaurante-api-ovsa.onrender.com/api';

// Test de conectividad mejorado con URL correcta
const testConnection = async () => {
  const endpoints = ['/health', '/ping', '/'];
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(`https://restaurante-api-ovsa.onrender.com${endpoint}`);
      if (response.ok) {
        const data = await response.json();
        console.log(`✅ Endpoint ${endpoint} funcionando:`, data);
        return true;
      }
    } catch (error) {
      console.error(`❌ Endpoint ${endpoint} falló:`, error);
    }
  }
  
  console.error('🔴 Todos los endpoints fallaron - API no disponible');
  return false;
};

// Función de request con retry - URL CORREGIDA
const apiRequestWithRetry = async (endpoint, options = {}, retries = 3) => {
  const CORRECT_API_URL = 'https://restaurante-api-ovsa.onrender.com/api';
  
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch(`${CORRECT_API_URL}${endpoint}`, {
        ...options,
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          ...options.headers 
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return response.status === 204 ? null : await response.json();
    } catch (error) {
      console.error(`❌ Intento ${i + 1} falló:`, error);
      if (i === retries - 1) throw error;
      
      // Esperar antes del siguiente intento
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
    }
  }
};

================================================================================
                        TROUBLESHOOTING - ERRORES COMUNES
================================================================================

✅ PROBLEMA PRINCIPAL RESUELTO:
❌ ERROR: URL INCORRECTA
CAUSA: Documentación tenía https://restaurante-api.onrender.com
SOLUCIÓN: ✅ URL CORRECTA: https://restaurante-api-ovsa.onrender.com

❌ ERROR: "Failed to fetch"
CAUSA: URL incorrecta en frontend
SOLUCIÓN: ✅ Usar https://restaurante-api-ovsa.onrender.com/api

❌ ERROR: "NODE_ENV cannot be accessed on the client"
CAUSA: process.env.NODE_ENV usado en frontend
SOLUCIÓN: Usar las configuraciones de arriba con URL correcta

VERIFICACIONES BÁSICAS ACTUALIZADAS:
1. Backend activo: GET https://restaurante-api-ovsa.onrender.com/health ✅
2. CORS funcionando: GET https://restaurante-api-ovsa.onrender.com/test-cors ✅
3. Endpoints: GET https://restaurante-api-ovsa.onrender.com/ ✅
4. API disponible: GET https://restaurante-api-ovsa.onrender.com/api/empleados ✅

================================================================================
                               CATEGORÍAS ✅
================================================================================

BASE: /api/categorias

1. OBTENER TODAS LAS CATEGORÍAS ✅
   GET /api/categorias
   
   Ejemplo JavaScript:
   const getCategorias = () => apiRequest('/categorias');

2. OBTENER CATEGORÍA POR ID ✅
   GET /api/categorias/{id}
   
   Ejemplo JavaScript:
   const getCategoriaById = (id) => apiRequest(`/categorias/${id}`);

3. CREAR NUEVA CATEGORÍA ✅
   POST /api/categorias
   
   Body:
   {
     "nombre": "Postres"
   }

4. ACTUALIZAR CATEGORÍA ✅
   PUT /api/categorias/{id}

5. ELIMINAR CATEGORÍA ✅
   DELETE /api/categorias/{id}

================================================================================
                               PRODUCTOS ✅
================================================================================

BASE: /api/productos

1. OBTENER TODOS LOS PRODUCTOS ✅
   GET /api/productos
   
   Ejemplo JavaScript:
   const getProductos = () => apiRequest('/productos');

2. OBTENER PRODUCTOS DISPONIBLES ✅
   GET /api/productos/disponibles
   
   Ejemplo JavaScript:
   const getProductosDisponibles = () => apiRequest('/productos/disponibles');

3. OBTENER PRODUCTO POR ID ✅
   GET /api/productos/{id}

4. OBTENER PRODUCTOS POR CATEGORÍA ✅
   GET /api/productos/categoria/{categoriaId}
   
   Ejemplo JavaScript:
   const getProductosByCategoria = (categoriaId) => 
     apiRequest(`/productos/categoria/${categoriaId}`);

5. 🆕 BUSCAR PRODUCTOS POR NOMBRE ✅
   GET /api/productos/buscar?nombre={nombre}
   
   Ejemplo JavaScript:
   const buscarProductos = (nombre) => 
     apiRequest(`/productos/buscar?nombre=${encodeURIComponent(nombre)}`);

6. CREAR NUEVO PRODUCTO ✅
   POST /api/productos

7. ACTUALIZAR PRODUCTO ✅
   PUT /api/productos/{id}

8. ELIMINAR PRODUCTO ✅
   DELETE /api/productos/{id}

================================================================================
                                 MESAS ✅
================================================================================

BASE: /api/mesas

1. OBTENER TODAS LAS MESAS ✅
   GET /api/mesas

2. OBTENER MESA POR ID ✅
   GET /api/mesas/{id}

3. OBTENER MESAS POR ESTADO ✅
   GET /api/mesas/estado/{estado}
   Estados válidos: LIBRE, OCUPADA, RESERVADA

4. CREAR NUEVA MESA ✅
   POST /api/mesas

5. ACTUALIZAR MESA ✅
   PUT /api/mesas/{id}

6. 🆕 CAMBIAR ESTADO DE MESA ✅
   PATCH /api/mesas/{id}/estado?estado={estado}
   
   Ejemplo JavaScript:
   const cambiarEstadoMesa = (id, estado) => 
     apiRequest(`/mesas/${id}/estado?estado=${estado}`, {
       method: 'PATCH'
     });

7. ELIMINAR MESA ✅
   DELETE /api/mesas/{id}

================================================================================
                               CLIENTES ✅
================================================================================

BASE: /api/clientes

1. OBTENER TODOS LOS CLIENTES ✅
   GET /api/clientes

2. OBTENER CLIENTE POR ID ✅
   GET /api/clientes/{id}

3. 🆕 BUSCAR CLIENTE POR TELÉFONO ✅
   GET /api/clientes/telefono/{telefono}
   
   Ejemplo JavaScript:
   const getClienteByTelefono = (telefono) => 
     apiRequest(`/clientes/telefono/${telefono}`);

4. 🆕 BUSCAR CLIENTES POR NOMBRE ✅
   GET /api/clientes/buscar?nombre={nombre}
   
   Ejemplo JavaScript:
   const buscarClientesPorNombre = (nombre) => 
     apiRequest(`/clientes/buscar?nombre=${encodeURIComponent(nombre)}`);

5. CREAR NUEVO CLIENTE ✅
   POST /api/clientes

6. ACTUALIZAR CLIENTE ✅
   PUT /api/clientes/{id}

7. ELIMINAR CLIENTE ✅
   DELETE /api/clientes/{id}

================================================================================
                               EMPLEADOS ✅
================================================================================

BASE: /api/empleados

1. OBTENER TODOS LOS EMPLEADOS ✅
   GET /api/empleados

2. OBTENER EMPLEADO POR ID ✅
   GET /api/empleados/{id}

3. OBTENER EMPLEADOS POR ROL ✅
   GET /api/empleados/rol/{rol}
   Roles válidos: MESERO, COCINERO, CAJERO, ADMIN

4. CREAR NUEVO EMPLEADO ✅
   POST /api/empleados

5. ACTUALIZAR EMPLEADO ✅
   PUT /api/empleados/{id}

6. ELIMINAR EMPLEADO ✅
   DELETE /api/empleados/{id}

================================================================================
                                PEDIDOS ✅
================================================================================

BASE: /api/pedidos

1. OBTENER TODOS LOS PEDIDOS ✅
   GET /api/pedidos

2. OBTENER PEDIDO POR ID ✅
   GET /api/pedidos/{id}

3. OBTENER PEDIDOS POR ESTADO ✅
   GET /api/pedidos/estado/{estado}
   Estados válidos: PENDIENTE, EN_PREPARACION, SERVIDO, CANCELADO

4. 🆕 OBTENER PEDIDOS POR MESA ✅
   GET /api/pedidos/mesa/{mesaId}
   
   Ejemplo JavaScript:
   const getPedidosByMesa = (mesaId) => 
     apiRequest(`/pedidos/mesa/${mesaId}`);

5. CREAR NUEVO PEDIDO ✅
   POST /api/pedidos
   
   Body:
   {
     "mesaId": 1,
     "clienteId": 1,
     "empleadoId": 1
   }

6. ACTUALIZAR PEDIDO ✅
   PUT /api/pedidos/{id}
   
   Body:
   {
     "estado": "EN_PREPARACION"
   }

7. AGREGAR PRODUCTO AL PEDIDO ✅
   POST /api/pedidos/{id}/detalles
   
   Body:
   {
     "productoId": 1,
     "cantidad": 2
   }

8. ELIMINAR PEDIDO ✅
   DELETE /api/pedidos/{id}

================================================================================
                               INVENTARIO ✅
================================================================================

BASE: /api/inventario

1. OBTENER TODO EL INVENTARIO ✅
   GET /api/inventario

2. OBTENER INVENTARIO POR ID ✅
   GET /api/inventario/{id}

3. OBTENER PRODUCTOS CON STOCK BAJO ✅
   GET /api/inventario/stock-bajo?minimo=5
   
   Ejemplo JavaScript:
   const getStockBajo = (minimo = 5) => 
     apiRequest(`/inventario/stock-bajo?minimo=${minimo}`);

4. 🆕 OBTENER INVENTARIO POR PRODUCTO ✅
   GET /api/inventario/producto/{productoId}
   
   Ejemplo JavaScript:
   const getInventarioByProducto = (productoId) => 
     apiRequest(`/inventario/producto/${productoId}`);

5. CREAR REGISTRO DE INVENTARIO ✅
   POST /api/inventario
   
   Body:
   {
     "productoId": 1,
     "cantidadStock": 50
   }

6. ACTUALIZAR INVENTARIO ✅
   PUT /api/inventario/{id}

7. ACTUALIZAR STOCK ESPECÍFICO ✅
   PUT /api/inventario/producto/{productoId}/stock?cantidad=50

8. ELIMINAR REGISTRO ✅
   DELETE /api/inventario/{id}

================================================================================
                               FACTURAS ✅
================================================================================

BASE: /api/facturas

1. OBTENER TODAS LAS FACTURAS ✅
   GET /api/facturas

2. OBTENER FACTURA POR ID ✅
   GET /api/facturas/{id}

3. CREAR FACTURA PARA PEDIDO ✅
   POST /api/facturas/pedido/{pedidoId}/empleado/{empleadoId}

4. OBTENER FACTURAS POR PERÍODO ✅
   GET /api/facturas/periodo?inicio=2025-05-01T00:00:00&fin=2025-05-31T23:59:59

5. OBTENER TOTAL DE VENTAS ✅
   GET /api/facturas/ventas-total?inicio=2025-05-01T00:00:00&fin=2025-05-31T23:59:59

6. 🆕 OBTENER FACTURAS POR EMPLEADO ✅
   GET /api/facturas/empleado/{empleadoId}
   
   Ejemplo JavaScript:
   const getFacturasByEmpleado = (empleadoId) => 
     apiRequest(`/facturas/empleado/${empleadoId}`);

7. 🆕 ELIMINAR FACTURA ✅
   DELETE /api/facturas/{id}

================================================================================
                          🆕 MEJORAS IMPLEMENTADAS
================================================================================

✅ NUEVAS RUTAS AGREGADAS:
- GET /api/productos/buscar?nombre={nombre} - Búsqueda de productos
- PATCH /api/mesas/{id}/estado?estado={estado} - Cambio rápido de estado
- GET /api/clientes/telefono/{telefono} - Búsqueda por teléfono
- GET /api/clientes/buscar?nombre={nombre} - Búsqueda de clientes
- GET /api/pedidos/mesa/{mesaId} - Pedidos por mesa
- GET /api/inventario/producto/{productoId} - Inventario por producto
- GET /api/facturas/empleado/{empleadoId} - Facturas por empleado
- DELETE /api/pedidos/{id} - Eliminar pedidos
- DELETE /api/facturas/{id} - Eliminar facturas

✅ LOGS MEJORADOS:
- Logging detallado en todos los controladores
- Información de entrada y salida en cada endpoint
- Manejo de errores con contexto específico

✅ VALIDACIONES MEJORADAS:
- Validación @Valid en todos los endpoints POST/PUT
- Manejo de parámetros opcionales con valores por defecto
- Validación de tipos de datos en parámetros de URL

✅ CORS MEJORADO:
- Configuración completa de CORS en todos los controladores
- Headers expuestos correctamente
- Soporte para todos los métodos HTTP

✅ MANEJO DE ERRORES:
- Excepciones capturadas y loggeadas
- Respuestas de error consistentes
- Información útil para debugging

================================================================================
                          CÓDIGOS DE RESPUESTA HTTP
================================================================================

200 - OK (Operación exitosa)
201 - Created (Recurso creado exitosamente)
204 - No Content (Eliminación exitosa)
400 - Bad Request (Datos inválidos o faltantes)
404 - Not Found (Recurso no encontrado)
500 - Internal Server Error (Error del servidor)

================================================================================
                            FUNCIONES AUXILIARES PARA FRONTEND
================================================================================

// Formatear fecha para la API
const formatDateForAPI = (date) => {
  return new Date(date).toISOString();
};

// Manejar errores de la API
const handleAPIError = (error) => {
  console.error('API Error:', error);
  // Aquí puedes agregar notificaciones de usuario
  if (error.status === 404) {
    alert('Recurso no encontrado');
  } else if (error.status === 400) {
    alert('Datos inválidos');
  } else {
    alert('Error del servidor');
  }
};

// Servicio completo para una entidad (ejemplo: Categorías)
const categoriaService = {
  getAll: () => apiRequest('/categorias'),
  getById: (id) => apiRequest(`/categorias/${id}`),
  create: (categoria) => apiRequest('/categorias', {
    method: 'POST',
    body: JSON.stringify(categoria)
  }),
  update: (id, categoria) => apiRequest(`/categorias/${id}`, {
    method: 'PUT',
    body: JSON.stringify(categoria)
  }),
  delete: (id) => apiRequest(`/categorias/${id}`, {
    method: 'DELETE'
  })
};

// Ejemplo de uso con async/await
const ejemplo = async () => {
  try {
    // Obtener todas las categorías
    const categorias = await categoriaService.getAll();
    console.log('Categorías:', categorias);
    
    // Crear una nueva categoría
    const nuevaCategoria = await categoriaService.create({
      nombre: 'Nuevos Postres'
    });
    console.log('Categoría creada:', nuevaCategoria);
    
  } catch (error) {
    handleAPIError(error);
  }
};

// Workflow completo: Crear pedido con productos
const crearPedidoCompleto = async (datosReserva) => {
  try {
    // 1. Crear el pedido
    const pedido = await createPedido({
      mesaId: datosReserva.mesaId,
      clienteId: datosReserva.clienteId,
      empleadoId: datosReserva.empleadoId
    });
    
    // 2. Agregar cada producto al pedido
    for (const producto of datosReserva.productos) {
      await agregarProductoAPedido(pedido.id, {
        productoId: producto.id,
        cantidad: producto.cantidad
      });
    }
    
    // 3. Obtener el pedido completo actualizado
    const pedidoCompleto = await getPedidoById(pedido.id);
    
    return pedidoCompleto;
  } catch (error) {
    handleAPIError(error);
    throw error;
  }
};

================================================================================
                               VALIDACIONES
================================================================================

CAMPOS OBLIGATORIOS:
- Categoria: nombre
- Producto: nombre, precio, categoriaId
- Mesa: numeroMesa
- Empleado: nombre, rol
- Pedido: mesaId
- DetallePedido: productoId, cantidad

FORMATOS ESPECIALES:
- Email: debe tener formato válido
- Precio: debe ser > 0
- Cantidad: debe ser > 0
- Fechas: formato ISO 8601 (YYYY-MM-DDTHH:mm:ss)

RESTRICCIONES DE NEGOCIO:
- No se puede eliminar categoría con productos
- Mesa no puede tener más de un pedido activo
- Solo pedidos SERVIDOS pueden generar factura
- No se pueden modificar pedidos SERVIDOS o CANCELADOS

================================================================================
                        INFORMACIÓN DEL KEEP-ALIVE SYSTEM
================================================================================

El backend incluye un sistema automático de keep-alive que:

✅ EVITA QUE EL SERVICIO SE DUERMA en Render
✅ OPTIMIZA RENDIMIENTO en horas de mayor uso
✅ MANTIENE CONEXIONES ACTIVAS 24/7
✅ LOGS DETALLADOS del estado del servicio

HORARIOS DE PING:
🕐 Cada 10 minutos: Ping básico 24/7
🕘 Cada 5 minutos: Horario laboral (8 AM - 10 PM)
🕜 Cada 3 minutos: Horas pico (12-2 PM y 7-9 PM)
🚀 Cada 30 minutos: Calentamiento del servicio

ENDPOINTS PARA MONITOREO:
- GET / → Información completa + uptime
- GET /health → Estado detallado del servicio  
- GET /ping → Respuesta rápida para verificación

================================================================================
                                   NOTAS
================================================================================

1. ✅ API disponible 24/7 con keep-alive automático
2. ✅ CORS habilitado para todos los orígenes - CORREGIDO
3. ✅ Logs detallados para debugging mejorado
4. ✅ Endpoints de test y verificación
5. ✅ Manejo de errores robusto
6. ✅ Headers CORS expuestos correctamente
7. ✅ CORS issue resuelto - allowCredentials = false
8. ✅ allowedOriginPatterns usado en lugar de allowedOrigins

DEBUGGING MEJORADO:
- 🔍 Logs específicos por endpoint en Render Dashboard
- 🌐 Test endpoints individuales con curl o Postman SIN ERRORES CORS
- 📡 Console.log detallado en apiRequest para debugging
- 🔄 Verificar keep-alive con GET /ping
- 📊 Monitoreo de performance por endpoint

CORS TESTING:
- ✅ Postman: Funciona sin errores
- ✅ Browser: No hay errores CORS
- ✅ Frontend: Puede consumir la API sin problemas
- ✅ Keep-alive: Funciona correctamente

================================================================================
                          🆕 CORS ISSUE RESUELTO
================================================================================

✅ PROBLEMA CORREGIDO:
El error "When allowCredentials is true, allowedOrigins cannot contain '*'" ha sido resuelto.

✅ VERIFICACIÓN RENDER:
1. Acceder a https://restaurante-api-ovsa.onrender.com/health
2. Debería retornar JSON con status: "UP"
3. Si no responde, el servicio está caído

✅ ACCIONES INMEDIATAS SI NO FUNCIONA:
1. Revisar Render Dashboard logs
2. Hacer Manual Deploy en Render
3. Verificar PostgreSQL database status
4. Contactar soporte de Render si persiste

================================================================================
                                   NOTAS ACTUALIZADAS
================================================================================

1. ✅ API disponible 24/7 con keep-alive automático MEJORADO
2. ✅ CORS habilitado para todos los orígenes - CORREGIDO
3. ✅ Debugging endpoints agregados para troubleshooting
4. ✅ Keep-alive optimizado específicamente para Render
5. ✅ Retry logic en frontend para mejor resilencia
6. ✅ Monitoreo mejorado con logs detallados

🚨 ESTADO ACTUAL: INVESTIGANDO PROBLEMA EN RENDER
- Servicio funciona en local ✅
- Servicio no responde en Render ❌
- Necesita verificación de deployment y logs

DEBUGGING PRIORITARIO:
- 🔍 Verificar Render Dashboard estado del servicio
- 🌐 Probar endpoints básicos con curl
- 📡 Revisar logs de deployment y runtime
- 🔄 Considerar redeploy manual si es necesario

================================================================================
                                 FIN DOCUMENTACIÓN
================================================================================
