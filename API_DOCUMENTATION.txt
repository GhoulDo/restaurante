================================================================================
                    DOCUMENTACIÓN API - SISTEMA RESTAURANTE
================================================================================

DESARROLLO: http://localhost:8081/api
PRODUCCIÓN: https://restaurante-api.onrender.com/api

🤖 KEEP-ALIVE AUTOMÁTICO: El servicio se mantiene activo automáticamente
⏰ HORARIOS OPTIMIZADOS:
   - Ping cada 10 minutos (24/7)
   - Ping cada 5 minutos (8 AM - 10 PM)
   - Ping cada 3 minutos (horas pico: 12-2 PM y 7-9 PM)

ENDPOINTS DE VERIFICACIÓN:
GET / - Información completa del servicio
GET /health - Estado de salud detallado
GET /ping - Ping rápido para keep-alive

HEADERS RECOMENDADOS:
Content-Type: application/json
Accept: application/json

================================================================================
                            CONFIGURACIÓN PARA FRONTEND
================================================================================

// Configuración automática según entorno
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://restaurante-api.onrender.com/api'
  : 'http://localhost:8081/api';

// O configuración manual
const API_CONFIG = {
  development: 'http://localhost:8081/api',
  production: 'https://restaurante-api.onrender.com/api'
};

const API_BASE_URL = API_CONFIG[process.env.NODE_ENV || 'development'];

// Headers estándar
const defaultHeaders = {
  'Content-Type': 'application/json',
  'Accept': 'application/json'
};

// Función helper para peticiones
const apiRequest = async (endpoint, options = {}) => {
  try {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      ...options,
      headers: { ...defaultHeaders, ...options.headers }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return response.status === 204 ? null : await response.json();
  } catch (error) {
    console.error('API request failed:', error);
    throw error;
  }
};

================================================================================
                               CATEGORÍAS
================================================================================

1. OBTENER TODAS LAS CATEGORÍAS
   GET /api/categorias
   
   Ejemplo JavaScript:
   const getCategorias = () => apiRequest('/categorias');
   
   Respuesta 200:
   [
     {
       "id": 1,
       "nombre": "Bebidas",
       "cantidadProductos": 5
     },
     {
       "id": 2,
       "nombre": "Comidas",
       "cantidadProductos": 8
     }
   ]

2. OBTENER CATEGORÍA POR ID
   GET /api/categorias/{id}
   
   Ejemplo JavaScript:
   const getCategoriaById = (id) => apiRequest(`/categorias/${id}`);
   
   Respuesta 200:
   {
     "id": 1,
     "nombre": "Bebidas",
     "cantidadProductos": 5
   }

3. CREAR NUEVA CATEGORÍA
   POST /api/categorias
   
   Body:
   {
     "nombre": "Postres"
   }
   
   Ejemplo JavaScript:
   const createCategoria = (categoria) => apiRequest('/categorias', {
     method: 'POST',
     body: JSON.stringify(categoria)
   });
   
   Respuesta 201:
   {
     "id": 3,
     "nombre": "Postres",
     "cantidadProductos": 0
   }

4. ACTUALIZAR CATEGORÍA
   PUT /api/categorias/{id}
   
   Body:
   {
     "nombre": "Bebidas Frías"
   }
   
   Ejemplo JavaScript:
   const updateCategoria = (id, categoria) => apiRequest(`/categorias/${id}`, {
     method: 'PUT',
     body: JSON.stringify(categoria)
   });
   
   Respuesta 200:
   {
     "id": 1,
     "nombre": "Bebidas Frías",
     "cantidadProductos": 5
   }

5. ELIMINAR CATEGORÍA
   DELETE /api/categorias/{id}
   
   Ejemplo JavaScript:
   const deleteCategoria = (id) => apiRequest(`/categorias/${id}`, {
     method: 'DELETE'
   });
   
   Respuesta 204: No Content

================================================================================
                               PRODUCTOS
================================================================================

1. OBTENER TODOS LOS PRODUCTOS
   GET /api/productos
   
   Ejemplo JavaScript:
   const getProductos = () => apiRequest('/productos');
   
   Respuesta 200:
   [
     {
       "id": 1,
       "nombre": "Pizza Margherita",
       "descripcion": "Pizza con tomate, mozzarella y albahaca",
       "precio": 25.50,
       "categoriaId": 2,
       "nombreCategoria": "Comidas",
       "cantidadStock": 10
     }
   ]

2. OBTENER PRODUCTOS DISPONIBLES (CON STOCK)
   GET /api/productos/disponibles
   
   Ejemplo JavaScript:
   const getProductosDisponibles = () => apiRequest('/productos/disponibles');
   
   Respuesta 200: [Mismo formato que arriba, solo productos con stock > 0]

3. OBTENER PRODUCTO POR ID
   GET /api/productos/{id}
   
   Ejemplo JavaScript:
   const getProductoById = (id) => apiRequest(`/productos/${id}`);

4. OBTENER PRODUCTOS POR CATEGORÍA
   GET /api/productos/categoria/{categoriaId}
   
   Ejemplo JavaScript:
   const getProductosByCategoria = (categoriaId) => 
     apiRequest(`/productos/categoria/${categoriaId}`);

5. CREAR NUEVO PRODUCTO
   POST /api/productos
   
   Body:
   {
     "nombre": "Hamburguesa Clásica",
     "descripcion": "Hamburguesa con carne, lechuga, tomate",
     "precio": 18.00,
     "categoriaId": 2,
     "cantidadStock": 15
   }
   
   Ejemplo JavaScript:
   const createProducto = (producto) => apiRequest('/productos', {
     method: 'POST',
     body: JSON.stringify(producto)
   });

6. ACTUALIZAR PRODUCTO
   PUT /api/productos/{id}
   
   Ejemplo JavaScript:
   const updateProducto = (id, producto) => apiRequest(`/productos/${id}`, {
     method: 'PUT',
     body: JSON.stringify(producto)
   });

7. ELIMINAR PRODUCTO
   DELETE /api/productos/{id}
   
   Ejemplo JavaScript:
   const deleteProducto = (id) => apiRequest(`/productos/${id}`, {
     method: 'DELETE'
   });

================================================================================
                                 MESAS
================================================================================

1. OBTENER TODAS LAS MESAS
   GET /api/mesas
   
   Ejemplo JavaScript:
   const getMesas = () => apiRequest('/mesas');
   
   Respuesta 200:
   [
     {
       "id": 1,
       "numeroMesa": 1,
       "estado": "LIBRE"
     },
     {
       "id": 2,
       "numeroMesa": 2,
       "estado": "OCUPADA"
     }
   ]

2. OBTENER MESA POR ID
   GET /api/mesas/{id}
   
   Ejemplo JavaScript:
   const getMesaById = (id) => apiRequest(`/mesas/${id}`);

3. OBTENER MESAS POR ESTADO
   GET /api/mesas/estado/{estado}
   Estados válidos: LIBRE, OCUPADA, RESERVADA
   
   Ejemplo JavaScript:
   const getMesasByEstado = (estado) => apiRequest(`/mesas/estado/${estado}`);

4. CREAR NUEVA MESA
   POST /api/mesas
   
   Body:
   {
     "numeroMesa": 10
   }
   
   Ejemplo JavaScript:
   const createMesa = (mesa) => apiRequest('/mesas', {
     method: 'POST',
     body: JSON.stringify(mesa)
   });

5. ACTUALIZAR MESA
   PUT /api/mesas/{id}
   
   Ejemplo JavaScript:
   const updateMesa = (id, mesa) => apiRequest(`/mesas/${id}`, {
     method: 'PUT',
     body: JSON.stringify(mesa)
   });

6. CAMBIAR ESTADO DE MESA
   PATCH /api/mesas/{id}/estado?estado=OCUPADA
   
   Ejemplo JavaScript:
   const cambiarEstadoMesa = (id, estado) => 
     apiRequest(`/mesas/${id}/estado?estado=${estado}`, {
       method: 'PATCH'
     });

7. ELIMINAR MESA
   DELETE /api/mesas/{id}
   
   Ejemplo JavaScript:
   const deleteMesa = (id) => apiRequest(`/mesas/${id}`, {
     method: 'DELETE'
   });

================================================================================
                               CLIENTES
================================================================================

1. OBTENER TODOS LOS CLIENTES
   GET /api/clientes
   
   Ejemplo JavaScript:
   const getClientes = () => apiRequest('/clientes');

2. OBTENER CLIENTE POR ID
   GET /api/clientes/{id}
   
   Ejemplo JavaScript:
   const getClienteById = (id) => apiRequest(`/clientes/${id}`);

3. BUSCAR CLIENTE POR TELÉFONO
   GET /api/clientes/telefono/{telefono}
   
   Ejemplo JavaScript:
   const getClienteByTelefono = (telefono) => 
     apiRequest(`/clientes/telefono/${telefono}`);

4. BUSCAR CLIENTES POR NOMBRE
   GET /api/clientes/buscar?nombre=Juan
   
   Ejemplo JavaScript:
   const buscarClientesPorNombre = (nombre) => 
     apiRequest(`/clientes/buscar?nombre=${encodeURIComponent(nombre)}`);

5. CREAR NUEVO CLIENTE
   POST /api/clientes
   
   Body:
   {
     "nombre": "María González",
     "telefono": "0987654321",
     "correo": "maria@email.com"
   }
   
   Ejemplo JavaScript:
   const createCliente = (cliente) => apiRequest('/clientes', {
     method: 'POST',
     body: JSON.stringify(cliente)
   });

6. ACTUALIZAR CLIENTE
   PUT /api/clientes/{id}
   
   Ejemplo JavaScript:
   const updateCliente = (id, cliente) => apiRequest(`/clientes/${id}`, {
     method: 'PUT',
     body: JSON.stringify(cliente)
   });

7. ELIMINAR CLIENTE
   DELETE /api/clientes/{id}
   
   Ejemplo JavaScript:
   const deleteCliente = (id) => apiRequest(`/clientes/${id}`, {
     method: 'DELETE'
   });

================================================================================
                               EMPLEADOS
================================================================================

1. OBTENER TODOS LOS EMPLEADOS
   GET /api/empleados
   
   Ejemplo JavaScript:
   const getEmpleados = () => apiRequest('/empleados');

2. OBTENER EMPLEADO POR ID
   GET /api/empleados/{id}
   
   Ejemplo JavaScript:
   const getEmpleadoById = (id) => apiRequest(`/empleados/${id}`);

3. OBTENER EMPLEADOS POR ROL
   GET /api/empleados/rol/{rol}
   Roles válidos: MESERO, COCINERO, CAJERO, ADMIN
   
   Ejemplo JavaScript:
   const getEmpleadosByRol = (rol) => apiRequest(`/empleados/rol/${rol}`);

4. CREAR NUEVO EMPLEADO
   POST /api/empleados
   
   Body:
   {
     "nombre": "Carlos López",
     "rol": "COCINERO",
     "telefono": "1122334455",
     "correo": "carlos@restaurante.com"
   }
   
   Ejemplo JavaScript:
   const createEmpleado = (empleado) => apiRequest('/empleados', {
     method: 'POST',
     body: JSON.stringify(empleado)
   });

5. ACTUALIZAR EMPLEADO
   PUT /api/empleados/{id}
   
   Ejemplo JavaScript:
   const updateEmpleado = (id, empleado) => apiRequest(`/empleados/${id}`, {
     method: 'PUT',
     body: JSON.stringify(empleado)
   });

6. ELIMINAR EMPLEADO
   DELETE /api/empleados/{id}
   
   Ejemplo JavaScript:
   const deleteEmpleado = (id) => apiRequest(`/empleados/${id}`, {
     method: 'DELETE'
   });

================================================================================
                                PEDIDOS
================================================================================

1. OBTENER TODOS LOS PEDIDOS
   GET /api/pedidos
   
   Ejemplo JavaScript:
   const getPedidos = () => apiRequest('/pedidos');
   
   Respuesta 200:
   [
     {
       "id": 1,
       "mesaId": 1,
       "numeroMesa": 5,
       "clienteId": 1,
       "nombreCliente": "Juan Pérez",
       "empleadoId": 1,
       "nombreEmpleado": "María García",
       "fecha": "2025-05-28T20:30:00",
       "estado": "PENDIENTE",
       "total": 45.50,
       "detalles": [
         {
           "id": 1,
           "pedidoId": 1,
           "productoId": 1,
           "nombreProducto": "Pizza Margherita",
           "cantidad": 2,
           "precioUnitario": 25.50,
           "subtotal": 51.00
         }
       ]
     }
   ]

2. OBTENER PEDIDO POR ID
   GET /api/pedidos/{id}
   
   Ejemplo JavaScript:
   const getPedidoById = (id) => apiRequest(`/pedidos/${id}`);

3. OBTENER PEDIDOS POR ESTADO
   GET /api/pedidos/estado/{estado}
   Estados válidos: PENDIENTE, EN_PREPARACION, SERVIDO, CANCELADO
   
   Ejemplo JavaScript:
   const getPedidosByEstado = (estado) => 
     apiRequest(`/pedidos/estado/${estado}`);

4. CREAR NUEVO PEDIDO
   POST /api/pedidos
   
   Body:
   {
     "mesaId": 1,
     "clienteId": 1,
     "empleadoId": 1
   }
   
   Ejemplo JavaScript:
   const createPedido = (pedido) => apiRequest('/pedidos', {
     method: 'POST',
     body: JSON.stringify(pedido)
   });

5. ACTUALIZAR PEDIDO
   PUT /api/pedidos/{id}
   
   Body:
   {
     "estado": "EN_PREPARACION"
   }
   
   Ejemplo JavaScript:
   const updatePedido = (id, pedido) => apiRequest(`/pedidos/${id}`, {
     method: 'PUT',
     body: JSON.stringify(pedido)
   });

6. AGREGAR PRODUCTO AL PEDIDO
   POST /api/pedidos/{id}/detalles
   
   Body:
   {
     "productoId": 1,
     "cantidad": 2
   }
   
   Ejemplo JavaScript:
   const agregarProductoAPedido = (pedidoId, detalle) => 
     apiRequest(`/pedidos/${pedidoId}/detalles`, {
       method: 'POST',
       body: JSON.stringify(detalle)
     });

================================================================================
                               INVENTARIO
================================================================================

1. OBTENER TODO EL INVENTARIO
   GET /api/inventario
   
   Ejemplo JavaScript:
   const getInventario = () => apiRequest('/inventario');

2. OBTENER INVENTARIO POR ID
   GET /api/inventario/{id}
   
   Ejemplo JavaScript:
   const getInventarioById = (id) => apiRequest(`/inventario/${id}`);

3. OBTENER PRODUCTOS CON STOCK BAJO
   GET /api/inventario/stock-bajo?minimo=5
   
   Ejemplo JavaScript:
   const getStockBajo = (minimo = 5) => 
     apiRequest(`/inventario/stock-bajo?minimo=${minimo}`);

4. CREAR REGISTRO DE INVENTARIO
   POST /api/inventario
   
   Body:
   {
     "productoId": 1,
     "cantidadStock": 50
   }
   
   Ejemplo JavaScript:
   const createInventario = (inventario) => apiRequest('/inventario', {
     method: 'POST',
     body: JSON.stringify(inventario)
   });

5. ACTUALIZAR INVENTARIO
   PUT /api/inventario/{id}
   
   Ejemplo JavaScript:
   const updateInventario = (id, inventario) => 
     apiRequest(`/inventario/${id}`, {
       method: 'PUT',
       body: JSON.stringify(inventario)
     });

6. ACTUALIZAR STOCK ESPECÍFICO
   PUT /api/inventario/producto/{productoId}/stock?cantidad=50
   
   Ejemplo JavaScript:
   const actualizarStock = (productoId, cantidad) => 
     apiRequest(`/inventario/producto/${productoId}/stock?cantidad=${cantidad}`, {
       method: 'PUT'
     });

7. ELIMINAR REGISTRO
   DELETE /api/inventario/{id}
   
   Ejemplo JavaScript:
   const deleteInventario = (id) => apiRequest(`/inventario/${id}`, {
     method: 'DELETE'
   });

================================================================================
                               FACTURAS
================================================================================

1. OBTENER TODAS LAS FACTURAS
   GET /api/facturas
   
   Ejemplo JavaScript:
   const getFacturas = () => apiRequest('/facturas');

2. OBTENER FACTURA POR ID
   GET /api/facturas/{id}
   
   Ejemplo JavaScript:
   const getFacturaById = (id) => apiRequest(`/facturas/${id}`);

3. CREAR FACTURA PARA PEDIDO
   POST /api/facturas/pedido/{pedidoId}/empleado/{empleadoId}
   
   Ejemplo JavaScript:
   const crearFactura = (pedidoId, empleadoId) => 
     apiRequest(`/facturas/pedido/${pedidoId}/empleado/${empleadoId}`, {
       method: 'POST'
     });

4. OBTENER FACTURAS POR PERÍODO
   GET /api/facturas/periodo?inicio=2025-05-01T00:00:00&fin=2025-05-31T23:59:59
   
   Ejemplo JavaScript:
   const getFacturasPorPeriodo = (inicio, fin) => 
     apiRequest(`/facturas/periodo?inicio=${inicio}&fin=${fin}`);

5. OBTENER TOTAL DE VENTAS
   GET /api/facturas/ventas-total?inicio=2025-05-01T00:00:00&fin=2025-05-31T23:59:59
   
   Ejemplo JavaScript:
   const getTotalVentas = (inicio, fin) => 
     apiRequest(`/facturas/ventas-total?inicio=${inicio}&fin=${fin}`);

================================================================================
                          CÓDIGOS DE RESPUESTA HTTP
================================================================================

200 - OK (Operación exitosa)
201 - Created (Recurso creado exitosamente)
204 - No Content (Eliminación exitosa)
400 - Bad Request (Datos inválidos o faltantes)
404 - Not Found (Recurso no encontrado)
500 - Internal Server Error (Error del servidor)

================================================================================
                            FUNCIONES AUXILIARES PARA FRONTEND
================================================================================

// Formatear fecha para la API
const formatDateForAPI = (date) => {
  return new Date(date).toISOString();
};

// Manejar errores de la API
const handleAPIError = (error) => {
  console.error('API Error:', error);
  // Aquí puedes agregar notificaciones de usuario
  if (error.status === 404) {
    alert('Recurso no encontrado');
  } else if (error.status === 400) {
    alert('Datos inválidos');
  } else {
    alert('Error del servidor');
  }
};

// Servicio completo para una entidad (ejemplo: Categorías)
const categoriaService = {
  getAll: () => apiRequest('/categorias'),
  getById: (id) => apiRequest(`/categorias/${id}`),
  create: (categoria) => apiRequest('/categorias', {
    method: 'POST',
    body: JSON.stringify(categoria)
  }),
  update: (id, categoria) => apiRequest(`/categorias/${id}`, {
    method: 'PUT',
    body: JSON.stringify(categoria)
  }),
  delete: (id) => apiRequest(`/categorias/${id}`, {
    method: 'DELETE'
  })
};

// Ejemplo de uso con async/await
const ejemplo = async () => {
  try {
    // Obtener todas las categorías
    const categorias = await categoriaService.getAll();
    console.log('Categorías:', categorias);
    
    // Crear una nueva categoría
    const nuevaCategoria = await categoriaService.create({
      nombre: 'Nuevos Postres'
    });
    console.log('Categoría creada:', nuevaCategoria);
    
  } catch (error) {
    handleAPIError(error);
  }
};

// Workflow completo: Crear pedido con productos
const crearPedidoCompleto = async (datosReserva) => {
  try {
    // 1. Crear el pedido
    const pedido = await createPedido({
      mesaId: datosReserva.mesaId,
      clienteId: datosReserva.clienteId,
      empleadoId: datosReserva.empleadoId
    });
    
    // 2. Agregar cada producto al pedido
    for (const producto of datosReserva.productos) {
      await agregarProductoAPedido(pedido.id, {
        productoId: producto.id,
        cantidad: producto.cantidad
      });
    }
    
    // 3. Obtener el pedido completo actualizado
    const pedidoCompleto = await getPedidoById(pedido.id);
    
    return pedidoCompleto;
  } catch (error) {
    handleAPIError(error);
    throw error;
  }
};

================================================================================
                               VALIDACIONES
================================================================================

CAMPOS OBLIGATORIOS:
- Categoria: nombre
- Producto: nombre, precio, categoriaId
- Mesa: numeroMesa
- Empleado: nombre, rol
- Pedido: mesaId
- DetallePedido: productoId, cantidad

FORMATOS ESPECIALES:
- Email: debe tener formato válido
- Precio: debe ser > 0
- Cantidad: debe ser > 0
- Fechas: formato ISO 8601 (YYYY-MM-DDTHH:mm:ss)

RESTRICCIONES DE NEGOCIO:
- No se puede eliminar categoría con productos
- Mesa no puede tener más de un pedido activo
- Solo pedidos SERVIDOS pueden generar factura
- No se pueden modificar pedidos SERVIDOS o CANCELADOS

================================================================================
                        INFORMACIÓN DEL KEEP-ALIVE SYSTEM
================================================================================

El backend incluye un sistema automático de keep-alive que:

✅ EVITA QUE EL SERVICIO SE DUERMA en Render
✅ OPTIMIZA RENDIMIENTO en horas de mayor uso
✅ MANTIENE CONEXIONES ACTIVAS 24/7
✅ LOGS DETALLADOS del estado del servicio

HORARIOS DE PING:
🕐 Cada 10 minutos: Ping básico 24/7
🕘 Cada 5 minutos: Horario laboral (8 AM - 10 PM)
🕜 Cada 3 minutos: Horas pico (12-2 PM y 7-9 PM)
🚀 Cada 30 minutos: Calentamiento del servicio

ENDPOINTS PARA MONITOREO:
- GET / → Información completa + uptime
- GET /health → Estado detallado del servicio  
- GET /ping → Respuesta rápida para verificación

================================================================================
                                   NOTAS
================================================================================

1. ✅ API disponible 24/7 con keep-alive automático
2. ✅ CORS habilitado para todos los orígenes
3. ✅ Todas las fechas en UTC (considera timezone en frontend)
4. ✅ IDs son autogenerados (no enviar en POST)
5. ✅ Campos opcionales pueden ser null o undefined
6. ✅ API REST estándar con códigos HTTP apropiados
7. ✅ Logs de errores disponibles en servidor
8. ✅ Keep-alive automático - NO SE DUERME
9. ⚠️ Rate limiting no implementado (considerar para producción)

PERFORMANCE:
- ✅ Primer request: ~3-5s (keep-alive activo)
- ✅ Requests subsecuentes: ~100-500ms
- ✅ Keep-alive mantiene el servicio siempre activo
- ✅ Optimización automática en horas pico
- ✅ Considera cachear datos que no cambian frecuentemente

KEEP-ALIVE BENEFITS:
- ✅ Sin cold starts después del primer deploy
- ✅ Respuesta inmediata en cualquier momento
- ✅ Optimización automática según horarios
- ✅ Monitoreo continuo del estado del servicio
- ✅ Logs detallados para debugging

SEGURIDAD:
- ⚠️ No hay autenticación implementada
- ✅ Validación de datos en servidor
- ✅ CORS configurado apropiadamente
- ✅ HTTPS automático en Render
- ✅ Logs de seguridad habilitados

================================================================================
                                 FIN DOCUMENTACIÓN
================================================================================
